import streamlit as st
import pandas as pd
import os
from datetime import datetime
import shutil
from pathlib import Path
import re
import hashlib
import json
import plotly.express as px
import subprocess
import pickle

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="An√°lisis de Chips Express",
    page_icon="üìä",
    layout="wide"
)

# Crear directorios necesarios si no existen
BASE_DIR = Path(".")  # Directorio actual
DETALLE_DIR = BASE_DIR / "Detalle"
RESULTADOS_DIR = BASE_DIR / "Resultados"
HISTORICO_DIR = BASE_DIR / "Detalle historico"
TEMP_DIR = BASE_DIR / "Temp"

for directory in [DETALLE_DIR, RESULTADOS_DIR, HISTORICO_DIR, TEMP_DIR]:
    directory.mkdir(parents=True, exist_ok=True)

def guardar_en_git(ruta_archivo, mensaje_commit):
    """
    Funci√≥n que guarda archivos y los a√±ade a Git autom√°ticamente.
    
    Args:
        ruta_archivo (Path): Ruta del archivo a guardar
        mensaje_commit (str): Mensaje para el commit
        
    Returns:
        bool: True si se guard√≥ correctamente, False en caso contrario
    """
    try:
        # Verificar que el archivo existe
        if not ruta_archivo.exists():
            st.error(f"‚ùå El archivo no existe: {ruta_archivo}")
            return False
        
        # Intentar a√±adir el archivo a Git
        try:
            # A√±adir el archivo al staging area
            result = subprocess.run(
                ['git', 'add', str(ruta_archivo)],
                capture_output=True,
                text=True,
                cwd=BASE_DIR
            )
            
            if result.returncode == 0:
                # Hacer commit del archivo
                commit_result = subprocess.run(
                    ['git', 'commit', '-m', mensaje_commit],
                    capture_output=True,
                    text=True,
                    cwd=BASE_DIR
                )
                
                if commit_result.returncode == 0:
                    st.success(f"‚úÖ Archivo guardado y a√±adido a Git: {ruta_archivo.name}")
                    return True
                else:
                    st.warning(f"‚ö†Ô∏è Archivo guardado pero no se pudo hacer commit: {commit_result.stderr}")
                    return True
            else:
                st.warning(f"‚ö†Ô∏è Archivo guardado pero no se pudo a√±adir a Git: {result.stderr}")
                return True
                
        except FileNotFoundError:
            # Git no est√° disponible, solo guardar localmente
            st.success(f"‚úÖ Archivo guardado localmente: {ruta_archivo.name}")
            return True
            
    except Exception as e:
        st.error(f"‚ùå Error al guardar archivo: {str(e)}")
        return False

def guardar_datos_persistentes(clave, datos):
    """
    Guarda datos en un archivo pickle para persistencia local.
    
    Args:
        clave (str): Clave para identificar los datos
        datos: Datos a guardar
    """
    try:
        archivo_persistencia = TEMP_DIR / f"{clave}_datos.pkl"
        with open(archivo_persistencia, 'wb') as f:
            pickle.dump(datos, f)
        # No mostrar mensaje de √©xito para evitar interferencias
    except Exception as e:
        st.warning(f"‚ö†Ô∏è No se pudieron guardar los datos: {str(e)}")

def cargar_datos_persistentes(clave):
    """
    Carga datos desde un archivo pickle local.
    
    Args:
        clave (str): Clave para identificar los datos
        
    Returns:
        Los datos cargados o None si no existen
    """
    try:
        archivo_persistencia = TEMP_DIR / f"{clave}_datos.pkl"
        if archivo_persistencia.exists():
            with open(archivo_persistencia, 'rb') as f:
                datos = pickle.load(f)
                st.success(f"‚úÖ Datos cargados localmente: {clave}")
                return datos
        else:
            st.info(f"‚ÑπÔ∏è No hay datos guardados para: {clave}")
            return None
    except Exception as e:
        st.warning(f"‚ö†Ô∏è No se pudieron cargar los datos: {str(e)}")
        return None

def analizar_archivos_pagados():
    resultados = []
    evaluaciones_detalle = []
    
    for archivo in os.listdir(RESULTADOS_DIR):
        if archivo.endswith('.xlsx') and 'PAGADO' in archivo and not archivo.startswith('~$'):
            try:
                # Leer el archivo
                df = pd.read_excel(RESULTADOS_DIR / archivo)
                
                # Verificar si las columnas necesarias existen
                if 'Fecha Primera Recarga' not in df.columns:
                    st.warning(f"Columna 'Fecha Primera Recarga' no encontrada en {archivo}")
                    continue
                    
                if 'Evaluaci√≥n' not in df.columns:
                    st.warning(f"Columna 'Evaluaci√≥n' no encontrada en {archivo}")
                    continue
                
                # Convertir la columna de fecha a datetime
                df['Fecha Primera Recarga'] = pd.to_datetime(df['Fecha Primera Recarga'])
                
                # Contar evaluaciones
                evaluaciones = df['Evaluaci√≥n'].value_counts()
                
                # Contar evaluaciones con los valores correctos
                primera_eval = evaluaciones.get('1ra evaluaci√≥n', 0)
                segunda_eval = evaluaciones.get('2da evaluaci√≥n', 0)
                tercera_eval = evaluaciones.get('3ra evaluaci√≥n', 0)
                cuarta_eval = evaluaciones.get('4ta evaluaci√≥n', 0)
                otras_eval = segunda_eval + tercera_eval + cuarta_eval
                
                # Calcular comisiones (cada l√≠nea vale $25)
                comision_primera = primera_eval * 25
                comision_otras = otras_eval * 25
                
                # Usar la fecha m√°s reciente del archivo
                fecha_archivo = df['Fecha Primera Recarga'].max()
                
                resultados.append({
                    'fecha': fecha_archivo,
                    'archivo': archivo,
                    'primera_eval': primera_eval,
                    'segunda_eval': segunda_eval,
                    'tercera_eval': tercera_eval,
                    'cuarta_eval': cuarta_eval,
                    'otras_eval': otras_eval,
                    'comision_primera': comision_primera,
                    'comision_otras': comision_otras
                })
                
                # Guardar detalle de evaluaciones para el funnel
                evaluaciones_detalle.append({
                    'fecha': fecha_archivo,
                    'primera': primera_eval,
                    'segunda': segunda_eval,
                    'tercera': tercera_eval,
                    'cuarta': cuarta_eval
                })
                
            except Exception as e:
                st.warning(f"Error al procesar {archivo}: {str(e)}")
                continue
    
    if not resultados:
        return pd.DataFrame(), pd.DataFrame()
    
    return pd.DataFrame(resultados).sort_values('fecha', ascending=False), pd.DataFrame(evaluaciones_detalle).sort_values('fecha', ascending=False)

def calcular_tasa_conversion_wicho():
    """
    Calcula la tasa de conversi√≥n desde el archivo Wicho hasta la primera evaluaci√≥n.
    
    Returns:
        dict: Diccionario con informaci√≥n de conversi√≥n
    """
    try:
        # Leer el archivo Wicho
        archivo_wicho = TEMP_DIR / "CHIPS RUTA JL CABRERA WICHO.xlsx"
        if not archivo_wicho.exists():
            return None
            
        dataframes_wicho = pd.read_excel(archivo_wicho, sheet_name=None)
        
        # Contar total de l√≠neas en el archivo Wicho
        total_lineas_wicho = 0
        for nombre_hoja, df_wicho in dataframes_wicho.items():
            if 'CEL' in df_wicho.columns:
                total_lineas_wicho += len(df_wicho)
        
        # Obtener total de l√≠neas en primera evaluaci√≥n de archivos pagados
        df_analisis, _ = analizar_archivos_pagados()
        if df_analisis.empty:
            return None
            
        total_primera_eval = df_analisis['primera_eval'].sum()
        
        # Calcular tasa de conversi√≥n
        tasa_conversion = (total_primera_eval / total_lineas_wicho * 100) if total_lineas_wicho > 0 else 0
        
        return {
            'total_lineas_wicho': total_lineas_wicho,
            'total_primera_eval': total_primera_eval,
            'tasa_conversion': tasa_conversion
        }
        
    except Exception as e:
        return None

def mostrar_analisis_pagados():
    st.header("An√°lisis de Comisiones Pagadas")
    
    df_analisis, df_funnel = analizar_archivos_pagados()
    
    if df_analisis.empty:
        st.warning("No hay archivos pagados para analizar")
        return
    
    # Calcular tasa de conversi√≥n desde Wicho
    conversion_wicho = calcular_tasa_conversion_wicho()
    
    # M√©tricas principales con estilo mejorado
    st.markdown("### üìä M√©tricas Principales")
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        total_primera = df_analisis['primera_eval'].sum()
        st.metric(
            "Total 1ra Evaluaci√≥n",
            f"{total_primera:,}",
            help="N√∫mero total de l√≠neas en primera evaluaci√≥n"
        )
    
    with col2:
        total_otras = df_analisis['otras_eval'].sum()
        st.metric(
            "Total Otras Evaluaciones",
            f"{total_otras:,}",
            help="N√∫mero total de l√≠neas en otras evaluaciones"
        )
    
    with col3:
        total_comision_primera = df_analisis['comision_primera'].sum()
        st.metric(
            "Comisi√≥n 1ra Evaluaci√≥n",
            f"${total_comision_primera:,.2f}",
            help="Comisi√≥n total por primera evaluaci√≥n"
        )
    
    with col4:
        total_comision_otras = df_analisis['comision_otras'].sum()
        st.metric(
            "Comisi√≥n Otras Evaluaciones",
            f"${total_comision_otras:,.2f}",
            help="Comisi√≥n total por otras evaluaciones"
        )
    
    with col5:
        total_comisiones = total_comision_primera + total_comision_otras
        st.metric(
            "Total Comisiones",
            f"${total_comisiones:,.2f}",
            help="Suma total de todas las comisiones"
        )
    
    # Nueva m√©trica de conversi√≥n desde Wicho
    if conversion_wicho:
        st.markdown("### üéØ Tasa de Conversi√≥n desde Archivo Wicho")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "Total L√≠neas Wicho",
                f"{conversion_wicho['total_lineas_wicho']:,}",
                help="Total de l√≠neas en el archivo Wicho original"
            )
        
        with col2:
            st.metric(
                "L√≠neas Convertidas",
                f"{conversion_wicho['total_primera_eval']:,}",
                help="L√≠neas que llegaron a primera evaluaci√≥n"
            )
        
        with col3:
            st.metric(
                "Tasa de Conversi√≥n",
                f"{conversion_wicho['tasa_conversion']:.1f}%",
                help="Porcentaje de l√≠neas Wicho que llegaron a primera evaluaci√≥n"
            )
    
    # Gr√°ficos con estilo mejorado
    st.markdown("### üìà Evoluci√≥n Temporal")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Evoluci√≥n de Evaluaciones")
        # Asegurar que las fechas se muestren correctamente
        df_analisis['mes'] = pd.to_datetime(df_analisis['fecha']).dt.strftime('%Y-%m')
        evolucion = df_analisis.groupby('mes')[['primera_eval', 'otras_eval']].sum()
        # Ordenar por fecha
        evolucion = evolucion.sort_index()
        st.line_chart(evolucion, use_container_width=True)
    
    with col2:
        st.markdown("#### Evoluci√≥n de Comisiones")
        evolucion_comisiones = df_analisis.groupby('mes')[['comision_primera', 'comision_otras']].sum()
        # Ordenar por fecha
        evolucion_comisiones = evolucion_comisiones.sort_index()
        st.line_chart(evolucion_comisiones, use_container_width=True)
    
    # Nueva secci√≥n para an√°lisis de evoluci√≥n de comisiones
    st.markdown("### üí∞ An√°lisis de Evoluci√≥n de Comisiones")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Diferencia entre Comisiones (1ra vs Otras)")
        df_analisis['diferencia_comisiones'] = df_analisis['comision_otras'] - df_analisis['comision_primera']
        df_analisis['mes'] = pd.to_datetime(df_analisis['fecha']).dt.strftime('%Y-%m')
        evolucion_diferencia = df_analisis.groupby('mes')['diferencia_comisiones'].sum()
        evolucion_diferencia = evolucion_diferencia.sort_index()
        st.line_chart(evolucion_diferencia, use_container_width=True)
        st.caption("Valores positivos indican que las comisiones de otras evaluaciones superan a las de primera evaluaci√≥n")
    
    with col2:
        st.markdown("#### Ratio de Comisiones (Otras/1ra)")
        df_analisis['ratio_comisiones'] = df_analisis['comision_otras'] / df_analisis['comision_primera'].replace(0, 1)
        evolucion_ratio = df_analisis.groupby('mes')['ratio_comisiones'].mean()
        evolucion_ratio = evolucion_ratio.sort_index()
        st.line_chart(evolucion_ratio, use_container_width=True)
        st.caption("Valores > 1 indican que las comisiones de otras evaluaciones son mayores que las de primera")
    
    # An√°lisis de Funnel de Evaluaciones Mejorado
    st.markdown("### üéØ Funnel de Evaluaciones")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Distribuci√≥n de Evaluaciones por Mes")
        df_funnel['mes'] = pd.to_datetime(df_funnel['fecha']).dt.strftime('%Y-%m')
        funnel_mensual = df_funnel.groupby('mes')[['primera', 'segunda', 'tercera', 'cuarta']].sum()
        funnel_mensual = funnel_mensual.sort_index()
        st.bar_chart(funnel_mensual, use_container_width=True)
    
    with col2:
        st.markdown("#### Tasa de Retenci√≥n por Fase")
        # Calcular tasas de retenci√≥n
        total_primera = df_funnel['primera'].sum()
        total_segunda = df_funnel['segunda'].sum()
        total_tercera = df_funnel['tercera'].sum()
        total_cuarta = df_funnel['cuarta'].sum()
        
        # Preparar datos para el gr√°fico
        fases = []
        lineas_count = []  # N√∫mero de l√≠neas para el ancho del funnel
        tasas = []
        lineas = []
        comisiones = []
        
        # Agregar conversi√≥n desde Wicho si est√° disponible
        if conversion_wicho:
            fases.append('Wicho ‚Üí 1ra')
            lineas_count.append(conversion_wicho['total_lineas_wicho'])  # Ancho basado en l√≠neas Wicho
            tasa_wicho = conversion_wicho['tasa_conversion']
            tasas.append(tasa_wicho)
            lineas.append(f"{conversion_wicho['total_lineas_wicho']:,} ‚Üí {conversion_wicho['total_primera_eval']:,}")
            comisiones.append(f"$0 ‚Üí ${total_primera * 25:,}")
        
        # Agregar fases de retenci√≥n
        fases.extend(['1ra ‚Üí 2da', '2da ‚Üí 3ra', '3ra ‚Üí 4ta'])
        lineas_count.extend([total_primera, total_segunda, total_tercera])  # Ancho basado en l√≠neas de cada fase
        tasas.extend([
            (total_segunda / total_primera * 100) if total_primera > 0 else 0,
            (total_tercera / total_segunda * 100) if total_segunda > 0 else 0,
            (total_cuarta / total_tercera * 100) if total_tercera > 0 else 0
        ])
        lineas.extend([
            f"{total_primera:,} ‚Üí {total_segunda:,}",
            f"{total_segunda:,} ‚Üí {total_tercera:,}",
            f"{total_tercera:,} ‚Üí {total_cuarta:,}"
        ])
        comisiones.extend([
            f"${total_primera * 25:,} ‚Üí ${total_segunda * 25:,}",
            f"${total_segunda * 25:,} ‚Üí ${total_tercera * 25:,}",
            f"${total_tercera * 25:,} ‚Üí ${total_cuarta * 25:,}"
        ])
        
        tasas_data = {
            'Fase': fases,
            'L√≠neas': lineas_count,  # Usar n√∫mero de l√≠neas para el ancho
            'Tasa de Retenci√≥n': tasas,
            'L√≠neas_Texto': lineas,
            'Comisi√≥n': comisiones
        }
        df_tasas = pd.DataFrame(tasas_data)
        
        # Crear el gr√°fico de funnel
        fig = px.funnel(
            df_tasas,
            x='L√≠neas',  # Usar n√∫mero de l√≠neas para el ancho del funnel
            y='Fase',
            title='Funnel de Conversi√≥n y Retenci√≥n',
            orientation='h',
            color='Fase',  # Colores diferentes para cada fase
            color_discrete_map={
                'Wicho ‚Üí 1ra': '#1f77b4',      # Azul
                '1ra ‚Üí 2da': '#ff7f0e',        # Naranja
                '2da ‚Üí 3ra': '#2ca02c',        # Verde
                '3ra ‚Üí 4ta': '#d62728'         # Rojo
            }
        )
        
        # Configurar el layout
        fig.update_layout(
            xaxis_title='N√∫mero de L√≠neas',
            yaxis_title='Fases',
            showlegend=False,
            height=500,
            margin=dict(t=50, b=50, l=100, r=50),
            xaxis=dict(
                range=[0, max(df_tasas['L√≠neas']) * 1.1]  # Dar un poco m√°s de espacio
            ),
            yaxis=dict(
                categoryorder='array',
                categoryarray=fases  # Mantener el orden definido
            )
        )
        
        # Agregar anotaciones simplificadas
        for i, row in df_tasas.iterrows():
            # Anotaci√≥n para l√≠neas (dentro del funnel)
            fig.add_annotation(
                x=row['L√≠neas'] / 2,  # Centrar en el funnel
                y=row['Fase'],
                text=row['L√≠neas_Texto'],
                showarrow=False,
                font=dict(size=14, color='white'),
                bgcolor='rgba(0, 0, 0, 0.6)',
                bordercolor='white',
                borderwidth=1,
                borderpad=6
            )
            
            # Anotaci√≥n para tasa de retenci√≥n (fuera del funnel)
            fig.add_annotation(
                x=row['L√≠neas'] + (max(df_tasas['L√≠neas']) * 0.03),
                y=row['Fase'],
                text=f"{row['Tasa de Retenci√≥n']:.1f}%",
                showarrow=True,
                arrowhead=2,
                arrowsize=1,
                arrowwidth=2,
                arrowcolor='black',
                font=dict(size=12, color='black'),
                bgcolor='rgba(255, 255, 255, 0.9)',
                bordercolor='black',
                borderwidth=1,
                borderpad=4
            )
        
        # Formatear el funnel
        fig.update_traces(
            textinfo='none',  # No mostrar texto por defecto
            textposition='inside'
        )
        
        st.plotly_chart(fig, use_container_width=True)
        st.caption("Funnel de conversi√≥n: desde el archivo Wicho hasta la 4ta evaluaci√≥n")
    
    # Nueva secci√≥n: Evoluci√≥n temporal del funnel
    st.markdown("### üìà Evoluci√≥n Temporal del Funnel")
    
    # Crear datos para la evoluci√≥n temporal
    if not df_analisis.empty:
        # Preparar datos temporales
        df_evolucion = df_analisis.copy()
        df_evolucion['fecha'] = pd.to_datetime(df_evolucion['fecha'])
        df_evolucion['mes'] = df_evolucion['fecha'].dt.strftime('%Y-%m')
        
        # Calcular l√≠neas por mes
        evolucion_tasas = df_evolucion.groupby('mes').agg({
            'primera_eval': 'sum',
            'segunda_eval': 'sum',
            'tercera_eval': 'sum',
            'cuarta_eval': 'sum'
        }).reset_index()
        
        # Ordenar por fecha
        evolucion_tasas = evolucion_tasas.sort_values('mes')
        
        # Crear gr√°fico de evoluci√≥n temporal de l√≠neas
        fig_evolucion = px.line(
            evolucion_tasas,
            x='mes',
            y=['primera_eval', 'segunda_eval', 'tercera_eval', 'cuarta_eval'],
            title='Evoluci√≥n de L√≠neas por Fase y Mes',
            labels={
                'mes': 'Mes',
                'value': 'N√∫mero de L√≠neas',
                'variable': 'Fase'
            },
            color_discrete_map={
                'primera_eval': '#1f77b4',  # Azul
                'segunda_eval': '#ff7f0e',  # Naranja
                'tercera_eval': '#2ca02c',  # Verde
                'cuarta_eval': '#d62728'    # Rojo
            }
        )
        
        # Configurar el gr√°fico
        fig_evolucion.update_layout(
            xaxis_title='Mes',
            yaxis_title='N√∫mero de L√≠neas',
            height=400,
            showlegend=True,
            legend_title='Fases'
        )
        
        # Actualizar nombres de las l√≠neas
        fig_evolucion.data[0].name = '1ra Evaluaci√≥n'
        fig_evolucion.data[1].name = '2da Evaluaci√≥n'
        fig_evolucion.data[2].name = '3ra Evaluaci√≥n'
        fig_evolucion.data[3].name = '4ta Evaluaci√≥n'
        
        st.plotly_chart(fig_evolucion, use_container_width=True)
        
        # Agregar conversi√≥n desde Wicho si est√° disponible
        if conversion_wicho:
            st.markdown("#### üìä Evoluci√≥n Wicho ‚Üí 1ra Evaluaci√≥n")
            
            # Calcular l√≠neas de Wicho por mes (asumiendo que todas las l√≠neas de primera eval vienen de Wicho)
            evolucion_wicho = df_evolucion.groupby('mes')['primera_eval'].sum().reset_index()
            evolucion_wicho['lineas_wicho'] = evolucion_wicho['primera_eval'] / (conversion_wicho['tasa_conversion'] / 100)
            
            # Crear gr√°fico de evoluci√≥n Wicho ‚Üí 1ra
            fig_wicho = px.line(
                evolucion_wicho,
                x='mes',
                y=['lineas_wicho', 'primera_eval'],
                title='Evoluci√≥n Wicho ‚Üí 1ra Evaluaci√≥n',
                labels={
                    'mes': 'Mes',
                    'value': 'N√∫mero de L√≠neas',
                    'variable': 'Origen'
                },
                color_discrete_map={
                    'lineas_wicho': '#9467bd',  # P√∫rpura
                    'primera_eval': '#1f77b4'   # Azul
                }
            )
            
            # Configurar el gr√°fico
            fig_wicho.update_layout(
                xaxis_title='Mes',
                yaxis_title='N√∫mero de L√≠neas',
                height=400,
                showlegend=True,
                legend_title='Origen'
            )
            
            # Actualizar nombres de las l√≠neas
            fig_wicho.data[0].name = 'L√≠neas Wicho'
            fig_wicho.data[1].name = '1ra Evaluaci√≥n'
            
            st.plotly_chart(fig_wicho, use_container_width=True)
            
            # M√©tricas de evoluci√≥n Wicho
            col1, col2, col3 = st.columns(3)
            
            with col1:
                total_wicho = evolucion_wicho['lineas_wicho'].sum()
                st.metric(
                    "Total L√≠neas Wicho",
                    f"{total_wicho:,.0f}",
                    help="Total de l√≠neas del archivo Wicho en el per√≠odo"
                )
            
            with col2:
                total_convertidas = evolucion_wicho['primera_eval'].sum()
                st.metric(
                    "Total Convertidas",
                    f"{total_convertidas:,}",
                    help="Total de l√≠neas convertidas a 1ra evaluaci√≥n"
                )
            
            with col3:
                if len(evolucion_wicho) > 1:
                    crecimiento_wicho = ((evolucion_wicho['lineas_wicho'].iloc[-1] - evolucion_wicho['lineas_wicho'].iloc[0]) / evolucion_wicho['lineas_wicho'].iloc[0] * 100)
                    st.metric(
                        "Crecimiento Wicho",
                        f"{crecimiento_wicho:.1f}%",
                        help="Crecimiento de l√≠neas Wicho desde el primer mes"
                    )
                else:
                    st.metric("Crecimiento Wicho", "N/A")
        
        # Gr√°fico de evoluci√≥n de volumen de l√≠neas (mantener el existente)
        st.markdown("#### üìä Evoluci√≥n del Volumen de L√≠neas por Fase")
        
        fig_volumen = px.line(
            evolucion_tasas,
            x='mes',
            y=['primera_eval', 'segunda_eval', 'tercera_eval', 'cuarta_eval'],
            title='Evoluci√≥n del Volumen de L√≠neas por Fase',
            labels={
                'mes': 'Mes',
                'value': 'N√∫mero de L√≠neas',
                'variable': 'Fase'
            },
            color_discrete_map={
                'primera_eval': '#1f77b4',  # Azul
                'segunda_eval': '#ff7f0e',  # Naranja
                'tercera_eval': '#2ca02c',  # Verde
                'cuarta_eval': '#d62728'    # Rojo
            }
        )
        
        # Configurar el gr√°fico
        fig_volumen.update_layout(
            xaxis_title='Mes',
            yaxis_title='N√∫mero de L√≠neas',
            height=400,
            showlegend=True,
            legend_title='Fases'
        )
        
        # Actualizar nombres de las l√≠neas
        fig_volumen.data[0].name = '1ra Evaluaci√≥n'
        fig_volumen.data[1].name = '2da Evaluaci√≥n'
        fig_volumen.data[2].name = '3ra Evaluaci√≥n'
        fig_volumen.data[3].name = '4ta Evaluaci√≥n'
        
        st.plotly_chart(fig_volumen, use_container_width=True)
        
        # Tabla resumida de evoluci√≥n
        st.markdown("#### üìã Resumen de Evoluci√≥n Temporal")
        
        # Crear tabla resumida
        tabla_evolucion = evolucion_tasas.copy()
        tabla_evolucion['Total_L√≠neas'] = tabla_evolucion['primera_eval'] + tabla_evolucion['segunda_eval'] + tabla_evolucion['tercera_eval'] + tabla_evolucion['cuarta_eval']
        
        # Agregar datos de Wicho si est√° disponible
        if conversion_wicho:
            tabla_evolucion['L√≠neas_Wicho'] = tabla_evolucion['primera_eval'] / (conversion_wicho['tasa_conversion'] / 100)
            columnas_tabla = [
                'mes', 'L√≠neas_Wicho', 'primera_eval', 'segunda_eval', 'tercera_eval', 'cuarta_eval', 'Total_L√≠neas'
            ]
            columnas_rename = {
                'mes': 'Mes',
                'L√≠neas_Wicho': 'L√≠neas Wicho',
                'primera_eval': '1ra Evaluaci√≥n',
                'segunda_eval': '2da Evaluaci√≥n',
                'tercera_eval': '3ra Evaluaci√≥n',
                'cuarta_eval': '4ta Evaluaci√≥n',
                'Total_L√≠neas': 'Total L√≠neas'
            }
            formato_tabla = {
                'L√≠neas Wicho': '{:,.0f}',
                '1ra Evaluaci√≥n': '{:,}',
                '2da Evaluaci√≥n': '{:,}',
                '3ra Evaluaci√≥n': '{:,}',
                '4ta Evaluaci√≥n': '{:,}',
                'Total L√≠neas': '{:,}'
            }
        else:
            columnas_tabla = [
                'mes', 'primera_eval', 'segunda_eval', 'tercera_eval', 'cuarta_eval', 'Total_L√≠neas'
            ]
            columnas_rename = {
                'mes': 'Mes',
                'primera_eval': '1ra Evaluaci√≥n',
                'segunda_eval': '2da Evaluaci√≥n',
                'tercera_eval': '3ra Evaluaci√≥n',
                'cuarta_eval': '4ta Evaluaci√≥n',
                'Total_L√≠neas': 'Total L√≠neas'
            }
            formato_tabla = {
                '1ra Evaluaci√≥n': '{:,}',
                '2da Evaluaci√≥n': '{:,}',
                '3ra Evaluaci√≥n': '{:,}',
                '4ta Evaluaci√≥n': '{:,}',
                'Total L√≠neas': '{:,}'
            }
        
        st.dataframe(
            tabla_evolucion[columnas_tabla].rename(columns=columnas_rename).style.format(formato_tabla),
            hide_index=True,
            use_container_width=True
        )
    
    # Tabla detallada con estilo mejorado
    st.markdown("### üìã Detalle por Archivo")
    df_analisis['fecha'] = pd.to_datetime(df_analisis['fecha']).dt.strftime('%Y-%m-%d')
    st.dataframe(
        df_analisis[[
            'fecha', 'archivo', 'primera_eval', 'otras_eval',
            'comision_primera', 'comision_otras'
        ]].rename(columns={
            'primera_eval': '1ra Evaluaci√≥n',
            'otras_eval': 'Otras Evaluaciones',
            'comision_primera': 'Comisi√≥n 1ra',
            'comision_otras': 'Comisi√≥n Otras'
        }).style.format({
            '1ra Evaluaci√≥n': '{:,}',
            'Otras Evaluaciones': '{:,}',
            'Comisi√≥n 1ra': '${:,.2f}',
            'Comisi√≥n Otras': '${:,.2f}'
        }),
        hide_index=True,
        use_container_width=True
    )

def obtener_estado_archivos():
    archivos = []
    for archivo in os.listdir(RESULTADOS_DIR):
        if archivo.endswith('.xlsx'):
            # Extraer fecha del nombre del archivo - manejar tanto formato antiguo como nuevo
            # Formato antiguo: YYYYMMDD_ (8 d√≠gitos)
            # Formato nuevo: YYYYMMDD_HHMM_ (12 d√≠gitos)
            fecha_match = re.match(r'(\d{8})_', archivo)
            if fecha_match:
                fecha_str = fecha_match.group(1)
                fecha = datetime.strptime(fecha_str, '%Y%m%d')
                estado = "PAGADO" if "PAGADO" in archivo else "POR PAGAR"
                archivos.append({
                    'nombre': archivo,
                    'fecha': fecha,
                    'estado': estado
                })
    return sorted(archivos, key=lambda x: x['fecha'], reverse=True)

def cambiar_estado_pago(nombre_archivo):
    archivo_actual = RESULTADOS_DIR / nombre_archivo
    if "POR_PAGAR" in nombre_archivo:
        nuevo_nombre = nombre_archivo.replace("POR_PAGAR", "PAGADO")
    else:
        nuevo_nombre = nombre_archivo.replace("PAGADO", "POR_PAGAR")
    
    archivo_nuevo = RESULTADOS_DIR / nuevo_nombre
    os.rename(archivo_actual, archivo_nuevo)
    return nuevo_nombre

def analizar_archivo_resultado(nombre_archivo):
    """
    Analiza un archivo de resultado para obtener el desglose de comisiones.
    
    Args:
        nombre_archivo (str): Nombre del archivo a analizar
        
    Returns:
        dict: Diccionario con el desglose de comisiones
    """
    try:
        ruta_archivo = RESULTADOS_DIR / nombre_archivo
        if not ruta_archivo.exists():
            return None
            
        # Leer el archivo
        df = pd.read_excel(ruta_archivo)
        
        # Verificar si las columnas necesarias existen
        if 'Evaluaci√≥n' not in df.columns:
            return None
            
        if 'Comisi√≥n' not in df.columns:
            return None
            
        # Contar evaluaciones con m√∫ltiples variaciones de nombres
        evaluaciones = df['Evaluaci√≥n'].value_counts()
        
        # Buscar evaluaciones con diferentes variaciones de nombres
        primera_eval = 0
        segunda_eval = 0
        tercera_eval = 0
        cuarta_eval = 0
        
        # Filtrar datos por tipo de evaluaci√≥n y calcular comisiones reales
        primera_mask = df['Evaluaci√≥n'].str.lower().str.contains('1ra|primera|1a|1¬∞|1¬∫', na=False)
        segunda_mask = df['Evaluaci√≥n'].str.lower().str.contains('2da|segunda|2a|2¬∞|2¬∫', na=False)
        tercera_mask = df['Evaluaci√≥n'].str.lower().str.contains('3ra|tercera|3a|3¬∞|3¬∫', na=False)
        cuarta_mask = df['Evaluaci√≥n'].str.lower().str.contains('4ta|cuarta|4a|4¬∞|4¬∫', na=False)
        
        # Contar l√≠neas por evaluaci√≥n
        primera_eval = primera_mask.sum()
        segunda_eval = segunda_mask.sum()
        tercera_eval = tercera_mask.sum()
        cuarta_eval = cuarta_mask.sum()
        
        # Calcular comisiones reales basadas en la columna 'Comisi√≥n'
        comision_primera = df[primera_mask]['Comisi√≥n'].sum() if primera_eval > 0 else 0
        comision_segunda = df[segunda_mask]['Comisi√≥n'].sum() if segunda_eval > 0 else 0
        comision_tercera = df[tercera_mask]['Comisi√≥n'].sum() if tercera_eval > 0 else 0
        comision_cuarta = df[cuarta_mask]['Comisi√≥n'].sum() if cuarta_eval > 0 else 0
        
        # Calcular totales
        otras_eval = segunda_eval + tercera_eval + cuarta_eval
        comision_otras = comision_segunda + comision_tercera + comision_cuarta
        comision_dat = comision_segunda + comision_tercera + comision_cuarta
        total_comision = comision_primera + comision_otras
        
        return {
            'primera_eval': primera_eval,
            'otras_eval': otras_eval,
            'segunda_eval': segunda_eval,
            'tercera_eval': tercera_eval,
            'cuarta_eval': cuarta_eval,
            'comision_primera': comision_primera,
            'comision_otras': comision_otras,
            'comision_dat': comision_dat,
            'comision_segunda': comision_segunda,
            'comision_tercera': comision_tercera,
            'comision_cuarta': comision_cuarta,
            'total_comision': total_comision,
            'total_lineas': len(df)
        }
        
    except Exception as e:
        return None

def mostrar_dashboard():
    st.header("Dashboard de Comisiones")
    
    # Obtener lista de archivos y sus estados
    archivos = obtener_estado_archivos()
    
    if not archivos:
        st.warning("No hay archivos de comisiones para mostrar")
        return
    
    # Crear DataFrame para el dashboard
    df_dashboard = pd.DataFrame(archivos)
    
    # Verificar que el DataFrame tiene las columnas necesarias
    if 'estado' not in df_dashboard.columns:
        st.error("Error: No se pudo crear el DataFrame correctamente")
        return
    
    # Analizar cada archivo para obtener comisiones
    analisis_comisiones = []
    for _, row in df_dashboard.iterrows():
        analisis = analizar_archivo_resultado(row['nombre'])
        if analisis:
            analisis_comisiones.append({
                'nombre': row['nombre'],
                'fecha': row['fecha'],
                'estado': row['estado'],
                **analisis
            })
    
    # Crear DataFrame con an√°lisis de comisiones
    if analisis_comisiones:
        df_comisiones = pd.DataFrame(analisis_comisiones)
        
        # Mostrar m√©tricas principales
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            total_comisiones = len(df_dashboard)
            st.metric("Total Archivos", total_comisiones)
        
        with col2:
            comisiones_pagadas = len(df_dashboard[df_dashboard['estado'] == 'PAGADO'])
            st.metric("Archivos Pagados", comisiones_pagadas)
        
        with col3:
            comisiones_pendientes = len(df_dashboard[df_dashboard['estado'] == 'POR PAGAR'])
            st.metric("Archivos Pendientes", comisiones_pendientes)
        
        with col4:
            total_pagar = df_comisiones['total_comision'].sum()
            st.metric("Total a Pagar", f"${total_pagar:,.2f}")
        
        # M√©tricas de comisiones
        st.markdown("### üí∞ Resumen de Comisiones")
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            total_primera = df_comisiones['comision_primera'].sum()
            st.metric("Total 1ra Evaluaci√≥n", f"${total_primera:,.2f}")
        
        with col2:
            total_dat = df_comisiones['comision_dat'].sum()
            st.metric("Total Comisi√≥n DAT", f"${total_dat:,.2f}")
        
        with col3:
            total_otras = df_comisiones['comision_otras'].sum()
            st.metric("Total Otras Evaluaciones", f"${total_otras:,.2f}")
        
        with col4:
            total_lineas_primera = df_comisiones['primera_eval'].sum()
            st.metric("L√≠neas 1ra Evaluaci√≥n", f"{total_lineas_primera:,}")
        
        with col5:
            total_lineas_otras = df_comisiones['otras_eval'].sum()
            st.metric("L√≠neas Otras Evaluaciones", f"{total_lineas_otras:,}")
        
        # Mostrar gr√°fico de estado de comisiones
        st.subheader("Estado de Comisiones por Fecha")
        df_dashboard['fecha'] = pd.to_datetime(df_dashboard['fecha'])
        df_dashboard['mes'] = df_dashboard['fecha'].dt.strftime('%Y-%m')
        
        # Gr√°fico de barras por mes
        estado_por_mes = df_dashboard.groupby(['mes', 'estado']).size().unstack(fill_value=0)
        # Ordenar por fecha
        estado_por_mes = estado_por_mes.sort_index()
        st.bar_chart(estado_por_mes)
        
        # Tabla detallada de comisiones con botones
        st.subheader("üìã Detalle de Comisiones por Archivo")
        
        # Mostrar cada archivo con su informaci√≥n y bot√≥n de acci√≥n
        for _, row in df_comisiones.iterrows():
            with st.container():
                # Crear un expander para cada archivo
                with st.expander(f"üìÑ {row['nombre']} - Estado: {row['estado']} - Total: ${row['total_comision']:,.2f}"):
                    # Informaci√≥n del archivo
                    col1, col2, col3, col4, col5, col6, col7 = st.columns([2, 1, 1, 1, 1, 1, 1])
                    
                    with col1:
                        st.write(f"**Fecha:** {pd.to_datetime(row['fecha']).strftime('%Y-%m-%d')}")
                        st.write(f"**Estado:** {row['estado']}")
                    
                    with col2:
                        st.write(f"**1ra Evaluaci√≥n:**")
                        st.write(f"{row['primera_eval']:,} l√≠neas")
                        st.write(f"${row['comision_primera']:,.2f}")
                    
                    with col3:
                        st.write(f"**2da Evaluaci√≥n:**")
                        st.write(f"{row['segunda_eval']:,} l√≠neas")
                        st.write(f"${row['comision_segunda']:,.2f}")
                    
                    with col4:
                        st.write(f"**3ra Evaluaci√≥n:**")
                        st.write(f"{row['tercera_eval']:,} l√≠neas")
                        st.write(f"${row['comision_tercera']:,.2f}")
                    
                    with col5:
                        st.write(f"**4ta Evaluaci√≥n:**")
                        st.write(f"{row['cuarta_eval']:,} l√≠neas")
                        st.write(f"${row['comision_cuarta']:,.2f}")
                    
                    with col6:
                        st.write(f"**Comisi√≥n DAT:**")
                        st.write(f"**${row['comision_dat']:,.2f}**")
                        st.write(f"({row['segunda_eval'] + row['tercera_eval'] + row['cuarta_eval']:,} l√≠neas)")
                    
                    with col7:
                        st.write(f"**Total:**")
                        st.write(f"{row['total_lineas']:,} l√≠neas")
                        st.write(f"${row['total_comision']:,.2f}")
                    
                    # Bot√≥n de acci√≥n
                    st.markdown("---")
                    col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
                    with col_btn2:
                        if st.button(
                            "Cambiar a PAGADO" if row['estado'] == 'POR PAGAR' else "Cambiar a POR PAGAR",
                            key=f"btn_dashboard_{row['nombre']}",
                            type="primary"
                        ):
                            nuevo_nombre = cambiar_estado_pago(row['nombre'])
                            st.success(f"Estado actualizado para {nuevo_nombre}")
                            st.rerun()
                
                st.markdown("---")
        
        # Tambi√©n mostrar una tabla resumida sin botones para referencia r√°pida
        st.subheader("üìä Tabla Resumida")
        df_mostrar = df_comisiones.copy()
        df_mostrar['fecha'] = pd.to_datetime(df_mostrar['fecha']).dt.strftime('%Y-%m-%d')
        
        st.dataframe(
            df_mostrar[[
                'fecha', 'nombre', 'estado', 'primera_eval', 'otras_eval', 
                'comision_primera', 'comision_dat', 'comision_otras', 'total_comision'
            ]].rename(columns={
                'primera_eval': '1ra Evaluaci√≥n',
                'otras_eval': 'Otras Evaluaciones',
                'comision_primera': 'Comisi√≥n 1ra',
                'comision_dat': 'Comisi√≥n DAT',
                'comision_otras': 'Comisi√≥n Otras',
                'total_comision': 'Total Comisi√≥n'
            }).style.format({
                '1ra Evaluaci√≥n': '{:,}',
                'Otras Evaluaciones': '{:,}',
                'Comisi√≥n 1ra': '${:,.2f}',
                'Comisi√≥n DAT': '${:,.2f}',
                'Comisi√≥n Otras': '${:,.2f}',
                'Total Comisi√≥n': '${:,.2f}'
            }),
            hide_index=True,
            use_container_width=True
        )
    else:
        # Mostrar m√©tricas b√°sicas si no hay an√°lisis disponible
        col1, col2, col3 = st.columns(3)
        with col1:
            total_comisiones = len(df_dashboard)
            st.metric("Total Comisiones", total_comisiones)
        
        with col2:
            comisiones_pagadas = len(df_dashboard[df_dashboard['estado'] == 'PAGADO'])
            st.metric("Comisiones Pagadas", comisiones_pagadas)
        
        with col3:
            comisiones_pendientes = len(df_dashboard[df_dashboard['estado'] == 'POR PAGAR'])
            st.metric("Comisiones Pendientes", comisiones_pendientes)
        
        st.warning("‚ö†Ô∏è No se pudo analizar los archivos para obtener el desglose de comisiones")
        
        # Mostrar tabla b√°sica
        st.subheader("Detalle de Comisiones")
        df_dashboard['fecha'] = pd.to_datetime(df_dashboard['fecha']).dt.strftime('%Y-%m-%d')
        
        # Mostrar tabla con botones de acci√≥n
        for _, row in df_dashboard.iterrows():
            with st.container():
                col1, col2, col3, col4 = st.columns([2, 2, 3, 2])
                with col1:
                    st.write(f"**{row['fecha']}**")
                with col2:
                    st.write(f"**{row['estado']}**")
                with col3:
                    st.write(f"**{row['nombre']}**")
                with col4:
                    if st.button(
                        "Cambiar a PAGADO" if row['estado'] == 'POR PAGAR' else "Cambiar a POR PAGAR",
                        key=f"btn_basic_{row['nombre']}",
                        type="primary"
                    ):
                        nuevo_nombre = cambiar_estado_pago(row['nombre'])
                        st.success(f"Estado actualizado para {nuevo_nombre}")
                        st.rerun()
                st.markdown("---")

def procesar_archivos():
    """
    Procesa los archivos de Wicho y detalle para generar el an√°lisis de comisiones.
    """
    # Ruta del archivo de wicho
    archivo_wicho = BASE_DIR / "CHIPS RUTA JL CABRERA WICHO.xlsx"
    
    if not archivo_wicho.exists():
        st.error("‚ùå No se encontr√≥ el archivo CHIPS RUTA JL CABRERA WICHO.xlsx")
        return False

    # Leer todas las hojas del archivo wicho
    try:
        st.info("üìä Leyendo archivo de Wicho...")
        dataframes_wicho = pd.read_excel(archivo_wicho, sheet_name=None)
        st.success("‚úÖ Archivo de Wicho le√≠do correctamente")
    except Exception as e:
        st.error(f"‚ùå Error al leer el archivo de Wicho: {str(e)}")
        return False

    # Lista para almacenar los resultados finales
    resultados_finales = []
    archivos_procesados = []
    total_lineas_procesadas = 0

    # Iterar sobre cada archivo de detalle
    archivos_detalle = [f for f in os.listdir(DETALLE_DIR) if f.endswith('.xlsx') and not f.startswith('~$')]
    
    if not archivos_detalle:
        st.warning("‚ö†Ô∏è No hay archivos de detalle para procesar")
        return False

    st.info(f"üìÅ Procesando {len(archivos_detalle)} archivos de detalle...")
    
    for archivo_detalle in archivos_detalle:
        ruta_archivo_detalle = DETALLE_DIR / archivo_detalle
        st.write(f"üìÑ Procesando: {archivo_detalle}")
        
        try:
            # Leer el archivo de detalle sin especificar la fila de encabezado
            df_detalle_sin_encabezado = pd.read_excel(ruta_archivo_detalle, header=None)
            periodo = df_detalle_sin_encabezado.iloc[0, 2]
            st.write(f"üìÖ Per√≠odo: {periodo}")

            # Leer el archivo de detalle con el encabezado en la fila 3
            df_detalle = pd.read_excel(ruta_archivo_detalle, header=2)
            df_detalle.columns = df_detalle.columns.str.strip()

            # Verificar el nombre de la columna en el archivo de detalle
            columnas_posibles = ['N√∫mero celular asignado', 'N√∫mero de Tel√©fono', 'N√∫mero celular', 'Celular']
            columna_numero = next((col for col in columnas_posibles if col in df_detalle.columns), None)

            if not columna_numero:
                st.warning(f"‚ö†Ô∏è No se encontr√≥ la columna de n√∫mero de tel√©fono en el archivo {archivo_detalle}")
                continue

            # Procesar cada hoja del archivo wicho
            resultados_archivo = []
            for nombre_hoja, df_wicho in dataframes_wicho.items():
                if 'CEL' in df_wicho.columns:
                    # Realizar el join
                    df_join = pd.merge(
                        df_wicho,
                        df_detalle,
                        left_on='CEL',
                        right_on=columna_numero,
                        how='inner'
                    )
                    
                    if not df_join.empty:
                        resultados_archivo.append(df_join)
                        st.write(f"‚úÖ Hoja '{nombre_hoja}': {len(df_join)} l√≠neas encontradas")

            # Concatenar resultados del archivo actual
            if resultados_archivo:
                resultado_archivo = pd.concat(resultados_archivo, ignore_index=True)
                resultado_archivo = resultado_archivo.drop_duplicates(subset='CEL')
                resultado_archivo['Archivo_Detalle'] = archivo_detalle
                resultado_archivo['Periodo'] = periodo
                resultados_finales.append(resultado_archivo)
                archivos_procesados.append(archivo_detalle)
                total_lineas_procesadas += len(resultado_archivo)
                st.success(f"‚úÖ Archivo {archivo_detalle} procesado correctamente")

        except Exception as e:
            st.error(f"‚ùå Error procesando el archivo {archivo_detalle}: {str(e)}")
            continue

    # Guardar resultados si se encontraron coincidencias
    if resultados_finales:
        resultado_final = pd.concat(resultados_finales, ignore_index=True)
        fecha_hora_actual = datetime.now().strftime("%Y%m%d_%H%M")
        nombre_archivo = RESULTADOS_DIR / f"{fecha_hora_actual}_analisis_chipExpress_(POR_PAGAR).xlsx"
        
        # Guardar el archivo de resultados
        try:
            resultado_final.to_excel(nombre_archivo, index=False)
            st.success(f"‚úÖ An√°lisis completado. Resultados guardados en: {nombre_archivo}")
            st.info(f"üìä Resumen del an√°lisis:")
            st.write(f"- Total de archivos procesados: {len(archivos_procesados)}")
            st.write(f"- Total de l√≠neas encontradas: {total_lineas_procesadas}")
            st.write(f"- Archivo de resultados: {nombre_archivo}")

            # Mover archivos procesados a la carpeta hist√≥rica
            for archivo in archivos_procesados:
                origen = DETALLE_DIR / archivo
                destino = HISTORICO_DIR / archivo
                shutil.move(str(origen), str(destino))
            
            st.success(f"‚úÖ Se movieron {len(archivos_procesados)} archivos a la carpeta hist√≥rica")
            return True
            
        except Exception as e:
            st.error(f"‚ùå Error al guardar el archivo de resultados: {str(e)}")
            return False
    else:
        st.warning("‚ö†Ô∏è No se encontraron coincidencias en ning√∫n archivo")
        return False

def mostrar_archivos_carpeta(directorio, titulo):
    st.subheader(titulo)
    try:
        archivos = []
        for archivo in os.listdir(directorio):
            if archivo.endswith('.xlsx') and not archivo.startswith('~$'):
                ruta_completa = directorio / archivo
                tama√±o = os.path.getsize(ruta_completa) / 1024
                fecha_mod = datetime.fromtimestamp(os.path.getmtime(ruta_completa))
                
                # Extraer a√±o del nombre del archivo o de la fecha de modificaci√≥n
                fecha_match = re.match(r'(\d{4})', archivo)
                if fecha_match:
                    a√±o = fecha_match.group(1)
                else:
                    a√±o = fecha_mod.strftime('%Y')
                
                archivos.append({
                    'Nombre': archivo,
                    'Tama√±o (KB)': f"{tama√±o:.1f}",
                    '√öltima modificaci√≥n': fecha_mod.strftime('%Y-%m-%d %H:%M:%S'),
                    'A√±o': a√±o
                })
        
        if archivos:
            # Convertir a DataFrame
            df = pd.DataFrame(archivos)
            
            # Obtener a√±os √∫nicos y ordenarlos de m√°s reciente a m√°s antiguo
            a√±os = sorted(df['A√±o'].unique(), reverse=True)
            
            # Crear desplegable para seleccionar a√±o
            a√±o_seleccionado = st.selectbox(
                "Seleccionar A√±o",
                a√±os,
                key=f"a√±o_{titulo}"
            )
            
            # Filtrar archivos por a√±o seleccionado
            df_filtrado = df[df['A√±o'] == a√±o_seleccionado]
            
            # Mostrar tabla de archivos
            st.dataframe(
                df_filtrado[['Nombre', 'Tama√±o (KB)', '√öltima modificaci√≥n']],
                hide_index=True,
                use_container_width=True
            )
            
            # Agregar botones de descarga
            st.subheader("Descargar Archivos")
            
            # Crear columnas para los archivos
            cols = st.columns(3)  # 3 archivos por fila
            
            for idx, archivo in enumerate(df_filtrado.itertuples()):
                col_idx = idx % 3
                with cols[col_idx]:
                    st.write(archivo.Nombre)
                    with open(directorio / archivo.Nombre, 'rb') as f:
                        st.download_button(
                            label="üì• Descargar",
                            data=f,
                            file_name=archivo.Nombre,
                            key=f"download_{archivo.Nombre}"
                        )
        else:
            st.warning(f"No hay archivos en {titulo}")
    except Exception as e:
        st.error(f"Error al acceder a {titulo}: {str(e)}")

# Funci√≥n para verificar credenciales
def check_credentials(username, password):
    # En un entorno real, esto deber√≠a estar en una base de datos o variables de entorno
    # Por ahora, usaremos un archivo de configuraci√≥n
    config_file = Path("config.json")
    
    if not config_file.exists():
        # Crear configuraci√≥n por defecto si no existe
        default_config = {
            "users": {
                "admin": {
                    "password": hashlib.sha256("Lupanar2024".encode()).hexdigest(),
                    "role": "admin"
                }
            }
        }
        with open(config_file, "w") as f:
            json.dump(default_config, f, indent=4)
    
    # Leer configuraci√≥n
    with open(config_file, "r") as f:
        config = json.load(f)
    
    # Verificar credenciales
    if username in config["users"]:
        stored_password = config["users"][username]["password"]
        if hashlib.sha256(password.encode()).hexdigest() == stored_password:
            return True, config["users"][username]["role"]
    
    return False, None

# Inicializar estado de autenticaci√≥n
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "username" not in st.session_state:
    st.session_state.username = None
if "role" not in st.session_state:
    st.session_state.role = None
if "archivo_eliminado" not in st.session_state:
    st.session_state.archivo_eliminado = False

# Mostrar login si no est√° autenticado
if not st.session_state.authenticated:
    st.title("üîê Login - An√°lisis de Chips Express")
    
    with st.form("login_form"):
        username = st.text_input("Usuario")
        password = st.text_input("Contrase√±a", type="password")
        submit = st.form_submit_button("Iniciar Sesi√≥n")
        
        if submit:
            authenticated, role = check_credentials(username, password)
            if authenticated:
                st.session_state.authenticated = True
                st.session_state.username = username
                st.session_state.role = role
                st.success("¬°Bienvenido!")
                st.rerun()
            else:
                st.error("Usuario o contrase√±a incorrectos")
    
    st.stop()

# Mostrar informaci√≥n de usuario
st.sidebar.write(f"üë§ {st.session_state.username}")

# Men√∫ lateral
st.sidebar.title("üìä An√°lisis de Chips Express")

# Selecci√≥n de p√°gina
pagina = st.sidebar.radio(
    "Navegaci√≥n",
    ["üìà Dashboard", "üìÅ Gesti√≥n de Archivos", "üöÄ Ejecutar An√°lisis de Comisiones", "‚öôÔ∏è Configuraci√≥n"]
)

# Contenido principal basado en la selecci√≥n
if pagina == "üìà Dashboard":
    st.title("üìà Dashboard de Comisiones")
    mostrar_analisis_pagados()
    st.markdown("---")
    mostrar_dashboard()

elif pagina == "üìÅ Gesti√≥n de Archivos":
    st.title("üìÅ Gesti√≥n de Archivos")
    
    # Tabs para diferentes tipos de archivos
    tab1, tab2, tab3 = st.tabs(["üìä Resultados", "üìö Detalle Hist√≥rico", "üìÅ Detalle"])
    
    with tab1:
        st.subheader("Archivos en Resultados")
        try:
            archivos = []
            for archivo in os.listdir(RESULTADOS_DIR):
                if archivo.endswith('.xlsx') and not archivo.startswith('~$'):
                    ruta_completa = RESULTADOS_DIR / archivo
                    tama√±o = os.path.getsize(ruta_completa) / 1024
                    fecha_mod = datetime.fromtimestamp(os.path.getmtime(ruta_completa))
                    archivos.append({
                        'Nombre': archivo,
                        'Tama√±o (KB)': f"{tama√±o:.1f}",
                        '√öltima modificaci√≥n': fecha_mod.strftime('%Y-%m-%d %H:%M:%S')
                    })
            
            if archivos:
                df = pd.DataFrame(archivos)
                st.dataframe(
                    df,
                    hide_index=True,
                    use_container_width=True
                )
                
                # Agregar botones de descarga
                st.subheader("Descargar Archivos")
                for archivo in archivos:
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.write(archivo['Nombre'])
                    with col2:
                        with open(RESULTADOS_DIR / archivo['Nombre'], 'rb') as f:
                            st.download_button(
                                label="üì• Descargar",
                                data=f,
                                file_name=archivo['Nombre'],
                                key=f"download_{archivo['Nombre']}"
                            )
            else:
                st.warning("No hay archivos en Resultados")
        except Exception as e:
            st.error(f"Error al acceder a Resultados: {str(e)}")
    
    with tab2:
        mostrar_archivos_carpeta(HISTORICO_DIR, "Archivos en Detalle Hist√≥rico")
    
    with tab3:
        mostrar_archivos_carpeta(DETALLE_DIR, "Archivos en Detalle")

elif pagina == "üöÄ Ejecutar An√°lisis de Comisiones":
    st.title("üöÄ Ejecutar An√°lisis de Comisiones")
    
    # Paso 1: Archivo Wicho (siempre permitir subir)
    archivo_wicho = TEMP_DIR / "CHIPS RUTA JL CABRERA WICHO.xlsx"
    
    st.markdown("### 1Ô∏è‚É£ Subir Archivo Wicho")
    
    # Mostrar estado actual del archivo
    if archivo_wicho.exists():
        st.success("‚úÖ Archivo de Wicho actualmente cargado")
        # Mostrar informaci√≥n del archivo actual
        fecha_mod = datetime.fromtimestamp(os.path.getmtime(archivo_wicho))
        tama√±o = os.path.getsize(archivo_wicho) / 1024
        st.info(f"üìÑ Archivo actual: {archivo_wicho.name}")
        st.info(f"üìÖ √öltima modificaci√≥n: {fecha_mod.strftime('%Y-%m-%d %H:%M:%S')}")
        st.info(f"üìè Tama√±o: {tama√±o:.1f} KB")
        
        # Bot√≥n para eliminar archivo actual
        if st.button("üóëÔ∏è Eliminar archivo actual", type="secondary"):
            try:
                archivo_wicho.unlink()
                st.success("‚úÖ Archivo eliminado. Puedes subir uno nuevo.")
                # Usar session state para indicar que se elimin√≥
                st.session_state.archivo_eliminado = True
            except Exception as e:
                st.error(f"‚ùå Error al eliminar archivo: {str(e)}")
    
    # Uploader para el archivo Wicho
    archivo_wicho_upload = st.file_uploader(
        "Sube el archivo CHIPS RUTA JL CABRERA WICHO.xlsx",
        type=['xlsx'],
        help="Este archivo contiene la informaci√≥n base para el an√°lisis. Si ya existe uno, ser√° reemplazado."
    )
    
    if archivo_wicho_upload:
        try:
            with st.spinner("üîÑ Procesando archivo Wicho..."):
                # Guardar archivo Wicho en el directorio temporal
                ruta_wicho = TEMP_DIR / "CHIPS RUTA JL CABRERA WICHO.xlsx"
                with open(ruta_wicho, "wb") as f:
                    f.write(archivo_wicho_upload.getvalue())
                
                # Guardar datos persistentes
                dataframes_wicho = pd.read_excel(archivo_wicho_upload, sheet_name=None)
                guardar_datos_persistentes("wicho", dataframes_wicho)
                
                # Guardar en Git (funci√≥n simplificada)
                if guardar_en_git(ruta_wicho, "Actualizar archivo Wicho"):
                    st.success("‚úÖ Archivo de Wicho guardado correctamente")
                else:
                    st.error("‚ùå Error al guardar el archivo Wicho")
        except Exception as e:
            st.error(f"‚ùå Error al procesar el archivo: {str(e)}")

    # Paso 2: Archivos de Detalle
    st.markdown("### 2Ô∏è‚É£ Subir Archivos de Detalle")
    
    # Crear tabs para diferentes tipos de archivos
    tab1, tab2 = st.tabs(["üìÅ Archivos Excel", "üì¶ Archivos ZIP"])
    
    with tab1:
        archivos_detalle = st.file_uploader(
            "Sube los archivos de detalle en Excel",
            type=['xlsx'],
            accept_multiple_files=True,
            help="Puedes subir uno o varios archivos de detalle para procesar"
        )
    
    with tab2:
        archivos_zip = st.file_uploader(
            "Sube los archivos ZIP",
            type=['zip'],
            accept_multiple_files=True,
            help="Puedes subir uno o varios archivos ZIP. Se extraer√°n autom√°ticamente los archivos Excel."
        )
        
        if archivos_zip:
            with st.spinner("üîÑ Procesando archivos ZIP..."):
                for zip_file in archivos_zip:
                    try:
                        # Crear directorio temporal para extraer
                        temp_extract_dir = TEMP_DIR / "temp_extract"
                        temp_extract_dir.mkdir(parents=True, exist_ok=True)
                        
                        # Guardar ZIP temporalmente
                        temp_zip = temp_extract_dir / zip_file.name
                        with open(temp_zip, "wb") as f:
                            f.write(zip_file.getvalue())
                        
                        # Extraer ZIP
                        import zipfile
                        with zipfile.ZipFile(temp_zip, 'r') as zip_ref:
                            zip_ref.extractall(temp_extract_dir)
                        
                        # Mover archivos Excel a Detalle
                        for excel_file in temp_extract_dir.glob("**/*.xlsx"):
                            if not excel_file.name.startswith('~$'):  # Ignorar archivos temporales
                                shutil.copy2(excel_file, DETALLE_DIR / excel_file.name)
                                st.success(f"‚úÖ Extra√≠do: {excel_file.name}")
                        
                        # Limpiar archivos temporales
                        shutil.rmtree(temp_extract_dir)
                        temp_zip.unlink()
                        
                    except Exception as e:
                        st.error(f"‚ùå Error al procesar {zip_file.name}: {str(e)}")
    
    # Paso 3: Ejecutar An√°lisis
    st.markdown("### 3Ô∏è‚É£ Ejecutar An√°lisis")
    
    # Mostrar estado de los archivos
    col1, col2 = st.columns(2)
    with col1:
        if archivo_wicho.exists():
            st.success("‚úÖ Archivo Wicho listo")
        else:
            st.warning("‚ö†Ô∏è Falta subir el archivo Wicho")
    
    with col2:
        total_archivos = len(archivos_detalle) + (len(archivos_zip) if archivos_zip else 0)
        if total_archivos > 0:
            st.success(f"‚úÖ {total_archivos} archivos listos para procesar")
        else:
            st.warning("‚ö†Ô∏è Falta subir archivos de detalle")
    
    # Mostrar resumen de archivos a procesar
    if total_archivos > 0:
        st.markdown("#### üìã Resumen de archivos a procesar")
        if archivos_detalle:
            st.markdown("**Archivos Excel:**")
            for archivo in archivos_detalle:
                st.write(f"- {archivo.name}")
        
        if archivos_zip:
            st.markdown("**Archivos ZIP:**")
            for zip_file in archivos_zip:
                st.write(f"- {zip_file.name}")
    
    # Bot√≥n para ejecutar el an√°lisis
    if archivos_detalle or archivos_zip:
        if st.button("üöÄ Ejecutar An√°lisis", type="primary", use_container_width=True):
            if not archivo_wicho.exists():
                st.error("‚ùå Primero debes subir el archivo de Wicho")
            else:
                # Procesar archivos Excel
                for archivo in archivos_detalle:
                    try:
                        # Guardar en directorio temporal
                        ruta_archivo = DETALLE_DIR / archivo.name
                        with open(ruta_archivo, "wb") as f:
                            f.write(archivo.getvalue())
                        
                        # Guardar en Git
                        if guardar_en_git(ruta_archivo, f"Agregar archivo de detalle: {archivo.name}"):
                            st.success(f"‚úÖ Archivo {archivo.name} guardado correctamente en Git")
                        else:
                            st.error(f"‚ùå Error al guardar {archivo.name} en Git")
                            continue
                    except Exception as e:
                        st.error(f"‚ùå Error al guardar {archivo.name}: {str(e)}")
                        continue

                # Ejecutar an√°lisis
                with st.spinner("üîÑ Procesando archivos..."):
                    if procesar_archivos():
                        st.success("‚úÖ An√°lisis completado exitosamente")
                        st.rerun()
                    else:
                        st.error("‚ùå Error al procesar los archivos")

elif pagina == "‚öôÔ∏è Configuraci√≥n":
    st.title("‚öôÔ∏è Configuraci√≥n")
    
    # Configuraci√≥n de directorios
    st.markdown("### üìÅ Configuraci√≥n de Directorios")
    st.info("""
    Los directorios actuales son:
    - **Detalle**: Para archivos de detalle nuevos
    - **Resultados**: Para archivos de an√°lisis generados
    - **Detalle hist√≥rico**: Para archivos de detalle procesados
    """)
    
    # Configuraci√≥n de comisiones
    st.markdown("### üí∞ Configuraci√≥n de Comisiones")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Valores de Comisi√≥n")
        comision_primera = st.number_input(
            "Comisi√≥n por 1ra Evaluaci√≥n ($)",
            min_value=0.0,
            max_value=1000.0,
            value=25.0,
            step=5.0,
            help="Valor de la comisi√≥n para la primera evaluaci√≥n"
        )
        
        comision_otras = st.number_input(
            "Comisi√≥n por Otras Evaluaciones ($)",
            min_value=0.0,
            max_value=1000.0,
            value=25.0,
            step=5.0,
            help="Valor de la comisi√≥n para evaluaciones posteriores"
        )
    
    with col2:
        st.markdown("#### Configuraci√≥n de Evaluaciones")
        dias_entre_evaluaciones = st.number_input(
            "D√≠as entre evaluaciones",
            min_value=1,
            max_value=90,
            value=30,
            step=1,
            help="N√∫mero de d√≠as que deben pasar entre evaluaciones"
        )
        
        max_evaluaciones = st.number_input(
            "M√°ximo de evaluaciones",
            min_value=1,
            max_value=10,
            value=4,
            step=1,
            help="N√∫mero m√°ximo de evaluaciones por l√≠nea"
        )
    
    # Configuraci√≥n de visualizaci√≥n
    st.markdown("### üìä Configuraci√≥n de Visualizaci√≥n")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Formato de Fechas")
        formato_fecha = st.selectbox(
            "Formato de fecha preferido",
            ["YYYY-MM-DD", "DD/MM/YYYY", "MM/DD/YYYY"],
            help="Formato en que se mostrar√°n las fechas en la aplicaci√≥n"
        )
        
        zona_horaria = st.selectbox(
            "Zona horaria",
            ["America/Mexico_City", "UTC"],
            help="Zona horaria para las fechas"
        )
    
    with col2:
        st.markdown("#### Configuraci√≥n de Gr√°ficos")
        mostrar_tooltips = st.checkbox(
            "Mostrar tooltips en gr√°ficos",
            value=True,
            help="Muestra informaci√≥n adicional al pasar el mouse sobre los gr√°ficos"
        )
        
        tema_graficos = st.selectbox(
            "Tema de gr√°ficos",
            ["Claro", "Oscuro", "Sistema"],
            help="Tema visual para los gr√°ficos"
        )
    
    # Configuraci√≥n de notificaciones
    st.markdown("### üîî Configuraci√≥n de Notificaciones")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Alertas")
        alerta_comisiones = st.checkbox(
            "Alertar cuando las comisiones de otras evaluaciones superen a las de primera",
            value=True,
            help="Muestra una alerta cuando las comisiones de otras evaluaciones sean mayores"
        )
        
        alerta_retencion = st.checkbox(
            "Alertar cuando la tasa de retenci√≥n sea baja",
            value=True,
            help="Muestra una alerta cuando la tasa de retenci√≥n entre fases sea menor al 50%"
        )
    
    with col2:
        st.markdown("#### Umbrales de Alerta")
        umbral_retencion = st.slider(
            "Umbral de retenci√≥n (%)",
            min_value=0,
            max_value=100,
            value=50,
            step=5,
            help="Porcentaje m√≠nimo de retenci√≥n para no mostrar alerta"
        )
        
        umbral_comisiones = st.slider(
            "Umbral de diferencia de comisiones (%)",
            min_value=0,
            max_value=100,
            value=20,
            step=5,
            help="Diferencia porcentual m√≠nima para mostrar alerta de comisiones"
        )
    
    # Bot√≥n para guardar configuraci√≥n
    if st.button("üíæ Guardar Configuraci√≥n", type="primary"):
        # Aqu√≠ ir√≠a la l√≥gica para guardar la configuraci√≥n
        st.success("Configuraci√≥n guardada exitosamente")
        
    # Informaci√≥n del sistema
    st.markdown("### ‚ÑπÔ∏è Informaci√≥n del Sistema")
    st.info(f"""
    - **Versi√≥n de la aplicaci√≥n**: 1.0.0
    - **√öltima actualizaci√≥n**: {datetime.now().strftime('%Y-%m-%d')}
    - **Directorio de trabajo**: {BASE_DIR.absolute()}
    - **Espacio disponible**: {shutil.disk_usage(BASE_DIR).free / (1024**3):.2f} GB
    """)

# Agregar espacio en la barra lateral
st.sidebar.markdown("---")
st.sidebar.markdown("---")

# Bot√≥n de logout al final de la barra lateral
if st.sidebar.button("üö™ Cerrar Sesi√≥n", type="primary"):
    st.session_state.authenticated = False
    st.session_state.username = None
    st.session_state.role = None
    st.rerun() 